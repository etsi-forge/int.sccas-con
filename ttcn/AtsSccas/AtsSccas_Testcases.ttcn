/*
 *    @author     TTF T016
 *    @version    $Id$
 *    @desc       This module provides the Test Cases for SCCAS.
 */

module AtsSccas_Testcases
{
    //LibCommon
    import from LibCommon_Sync all ;
    import from LibCommon_VerdictControl all;
    //LibSip
    import from LibSip_Interface all;
    import from LibSip_SIPTypesAndValues all;
    //LibIms
    import from LibIms_SIPTypesAndValues all;
    import from LibIms_Interface all;
    //AtsIms
    import from AtsSccas_TestConfiguration all;
    import from AtsSccas_TestSystem all;
    import from AtsSccas_TCFunctions all;
    import from AtsSccas_PICS all;

    group Group_6_3 {
 
        group TP_6_3_1_General {

            /*
            * @desc Verify that the SCCAS successfully obtain/processes 3pty registration information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_01(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_01(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_01

            /*
            * @desc Verify that the SCCAS successfully obtain/processes de-registration information (Expires=0)
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_02(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_02(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_02

          } // End of group TP_6_3_1_General

        group TP_6_3_2_Triggers_To_ATCF {

            /*
            * @desc Verify that the SCCAS successfully obtain/processes SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_03(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_03(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_03

          } // End of group TP_6_3_2_Triggers_To_ATCF

        group TP_6_3_3_SRVCC_Information_To_ATCF {

            /*
            * @desc Verify that the SCCAS successfully sends MESSAGE providing PS to CS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_04(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_atcf;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_atcf);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_04_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_atcf.start(f_TC_ISC_SCCAS_RSC_REG_04_atcf(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_atcf);

            } // End of TC_ISC_SCCAS_RSC_REG_04

          } // End of group TP_6_3_3_SRVCC_Information_To_ATCF

        group TP_6_3_4_Trigger_SRVCC_To_MSC {

            /*
            * @desc Verify that the SCCAS successfully get CS to PS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_05(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_msc;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_msc);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_05_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_msc.start(f_TC_ISC_SCCAS_RSC_REG_05_msc(p_cSeq_s)); // TODO Not considered in TP?

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_msc);

            } // End of TC_ISC_SCCAS_RSC_REG_05

          } // End of group TP_6_3_4_Trigger_SRVCC_To_MSC

        group TP_6_3_5_Providing_SRVCC_To_MSC {

            /*
            * @desc Verify that the SCCAS successfully provide CS to PS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_06(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_msc;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_msc);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_06_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_msc.start(f_TC_ISC_SCCAS_RSC_REG_06_msc(p_cSeq_s)); // TODO Not considered in TP?

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_msc);

            } // End of TC_ISC_SCCAS_RSC_REG_06

          } // End of group TP_6_3_5_Providing_SRVCC_To_MSC

     } // End of group Group_6_3
     
     group Group_6A_4 {

        group TP_6A_4_2_SIP_INVITE_request {

           /*
            * @desc Verify that the SCCAS send INVITE for anchored user populated with FeatureCaps header
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_GEN_INV_01(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_GEN_INV_01(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_GEN_INV_01
            
		} // End of group TP_6A_4_2_SIP_INVITE_request
		
		group TP_6A_4_3_SIP_INVITE_responses_towards_the_SC_UE {
			
			/*
			 * @desc Verify that the SCCAS sends 1xx and/or 2xx response to the SIP INVITE request towards the served user 
			 * @param p_cSeq_s Transaction Id
			 */
			 testcase TC_ISC_SCCAS_GEN_INV_02(inout CSeq p_cSeq_s) 
			 runs on ServerSyncComp
			 system TestAdapter {
				 //Variables
				 var ImsComponent v_imsComponent_ueims;

				 // Test control
				 if (not PICS_SCCAS_GM) {
					 log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					 stop;
				 }

				 // Test component configuration
				 f_cf_1IscUp(v_imsComponent_ueims);

				 //Start
				 f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_GEN_INV_02(p_cSeq_s));

				 // synchronize both PTCs on 3 sychronization points
				 f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				 f_cf_1IscDown(v_imsComponent_ueims);

			 } // End of TC_ISC_SCCAS_GEN_INV_02

        } // End of group TP_6A_4_3_SIP_INVITE_responses_towards_the_SC_UE

    } // End of group Group_6A_4
     
    group Group_7_3 {
        group TP_7_3_1_Distinction_of_requests_sent_to_the_SCCAS {

           /**
            * @desc Verify that the SCCAS first receives SIP INVITE request from UE/SCSCF
            * @param p_cSeq_s Transaction Id
            */
            testcase TP_ISC_SCCAS_ORI_INV_01(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_ORI_INV_01(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TP_ISC_SCCAS_ORI_INV_01

        } // End of group TP_7_3_1_Distinction_of_requests_sent_to_the_SCCAS
        
		group TP_7_3_2_Call_origination_procedures_at_the_SCCAS{

           /*
            * @desc Verify that the SCCAS sends 1xx/2xx response to the SIP INVITE request towards the served user
            * @param p_cSeq_s Transaction Id
            */
            testcase TP_ISC_SCCAS_ORI_INV_02(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);
				
                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_ORI_INV_02_UE(p_cSeq_s));
				
                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);
				
            } // End of TP_ISC_SCCAS_ORI_INV_02
			
		} // End of group TP_7_3_2_Call_origination_procedures_at_the_SCCAS
    } // End of group Group_7_3
     
    group Group_8_3 {
    	
		group TP_8_3_1_Distinction_of_requests_sent_to_the_SCCAS{
			
			/**
			 * @desc Verify that the SCCAS last receives SIP INVITE request from UE/SCSCF
			 * @param p_cSeq_s Transaction Id
			 */
			 testcase TP_ISC_SCCAS_TER_INV_01(inout CSeq p_cSeq_s) 
			 runs on ServerSyncComp
			 system TestAdapter {
				 //Variables
				 var ImsComponent v_imsComponent_ueims;

				 // Test control
				 if (not PICS_SCCAS_GM) {
					 log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					 stop;
				 }

				 // Test component configuration
				 f_cf_1IscUp(v_imsComponent_ueims);

				 //Start
				 f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_TER_INV_01(p_cSeq_s));

				 // synchronize both PTCs on 3 sychronization points
				 f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				 f_cf_1IscDown(v_imsComponent_ueims);

			 } // End of TP_ISC_SCCAS_TER_INV_01
			 
		} // End of group TP_8_3_1_Distinction_of_requests_sent_to_the_SCCAS
			
    } // End of group Group_8_3
     
    group Group_9_3 {
    	
		/*
		 * @desc Verify that the P-CSCF successfully processes an initial INVITE (Originating Leg) with dynamic STI.
		 * @param p_cSeq_s Transaction Id
		 */
		testcase TP_ISC_SCCAS_CPT_INV_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
				
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			// TODO: setUo "the UE entity isRegisteredTo the IMS"
			
			// f_Registration_IMS
			
			f_cf_1IscUp(v_imsComponent_ueims);
			
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_01(p_cSeq_s));
			
			
			
			f_cf_1IscDown(v_imsComponent_ueims);
				
		} // End of TP_ISC_SCCAS_CPT_INV_01
		
		/*
		 * @desc Verify that the P-CSCF successfully processes an initial INVITE (Originating Leg) with static STI.
		 * @param p_cSeq_s Transaction Id
		 */		
		testcase TP_ISC_SCCAS_CPT_INV_02(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			// TODO: setUo "the UE entity isRegisteredTo the IMS"
			
			// f_Registration_IMS
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_02(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_CPT_INV_02
		
		
		/*
		 * @desc Verify that the P-CSCF successfully processes an re-INVITE (Originating Leg)
		 * @param p_cSeq_s Transaction Id
		 */		
		testcase TP_ISC_SCCAS_CPT_RIN_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
			
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			// TODO: setUo "the UE entity isRegisteredTo the IMS"
			
			// f_Registration_IMS
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_RIN_01(p_cSeq_s));
			
			
			
			f_cf_1IscDown(v_imsComponent_ueims);
				
		} // End of TP_ISC_SCCAS_CPT_RIN_01
			
			
		/*
		 * @desc Verify that the P-CSCF successfully processes an ACK and release the source access leg.
		 * @param p_cSeq_s Transaction Id
		 */		
		testcase TP_ISC_SCCAS_CPT_ACK_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
			
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			// TODO: setUo "the UE entity isRegisteredTo the IMS"
			
			// f_Registration_IMS
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_ACK_01(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
				
		} // End of TP_ISC_SCCAS_CPT_ACK_01
		

		/*
		 * @desc Verify that the SCC AS Conditions for selecting a sessions in an early dialog phase
		 * @param p_cSeq_s Transaction Id
		 */		
		testcase TP_ISC_SCCAS_CPT_INV_03(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_03(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_CPT_INV_03
		
		/*
		 * @desc Verify that the SCC AS accepts conditions in an early dialog phase
		 * @param p_cSeq_s Transaction Id
		 */	
		testcase TP_ISC_SCCAS_CPT_INV_04(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			// TODO: SCC AS supports the MSC Server g.3gpp.drvcc-alerting feature 
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_04(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_CPT_INV_04
    	
    	
		testcase TP_ISC_SCCAS_PCT_UPD_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_PCT_UPD_01
		
		testcase TP_ISC_SCCAS_PCT_RES_02(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_PCT_RES_02
		
		testcase TP_ISC_SCCAS_PCT_INV_05(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_PCT_INV_05
		
		testcase TP_ISC_SCCAS_PCT_REF_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_PCT_REF_01
		
		
		/*
		 * @desc Verify that the SCC AS terminates the call over CS after receiving a SIP 488
		 * @param p_cSeq_s Transaction Id
		 */	
		testcase TP_ISC_SCCAS_PCT_REF_02(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			// TODO: SIP INVITE was sent with:
			// 		creating the session in the terminating alerting phase without an SDP MIME body
			// SCC AS supports PS to CS dual radio access
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_REF_02(p_cSeq_s));
					
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_PCT_REF_02
		
		testcase TP_ISC_SCCAS_PCT_RES_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_PCT_RES_01
		
		
		testcase TP_ISC_SCCAS_MED_BYE_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_MED_BYE_01
		
		testcase TP_ISC_SCCAS_MED_RES_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_MED_RES_01
		
		testcase TP_ISC_SCCAS_MED_RIN_01(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// TODO
			
		} // End of TP_ISC_SCCAS_MED_RIN_01
		
		
		/*
		 * @desc Verify that the SCC AS performs the procedures correctly for CS to PS dual radio access transfer for originating calls in pre-alerting phase or in alerting phase on the originating side
		 * @param p_cSeq_s Transaction Id
		 */	
		testcase TP_ISC_SCCAS_CPT_INV_05(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		// the SCC AS supports CS to PS dual radio access transfer for originating calls in pre-alerting phase
		
		var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			// TODO: SCC AS supports the MSC Server g.3gpp.drvcc-alerting feature 
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_05(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_CPT_INV_05
		
	
		/*
		 * @desc Verify that SCC AS correctly recognizes and initiated for CS to PS dual radio access transfer for a call in the alerting phase on the terminating side 
		 * @param p_cSeq_s Transaction Id
		 */	
		testcase TP_ISC_SCCAS_CPT_INV_06(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
		var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			// TODO: SCC AS supports the MSC Server g.3gpp.drvcc-alerting feature 
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_06(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TP_ISC_SCCAS_CPT_INV_06
		
		
		testcase TC_ISC_SCCAS_PCT_INV_05(inout CSeq p_cSeq_s)
		runs on ServerSyncComp
		system TestAdapter {
		
			var ImsComponent v_imsComponent_ueims;
				   
			// Test control
			if (not PICS_SCCAS_GM) {
				log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***");
				stop;
			}
			
			
			// Test component configuration
			f_cf_1IscUp(v_imsComponent_ueims);
			
			// TODO: SCC AS supports the MSC Server g.3gpp.drvcc-alerting feature 
			
				
			f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_05(p_cSeq_s));
			
			
			
			// synchronize PTC on 3 sychronization points
			f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

			f_cf_1IscDown(v_imsComponent_ueims);
			
		} // End of TC_ISC_SCCAS_PCT_INV_05
    	
    } // End of group Group_9_3
     
    group Group_10_3 {

		   /*
			* @desc Verify that the SCC AS successfully processes an INVITE on a previously established dialog if the SIP INVITE request contains a Replaces header field.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_RIN_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_RIN_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_RIN_01  

		   /*
			* @desc Verify that the SCC AS successfully processes an UPDATE on an existing early dialog if the SIP INVITE request contains a Replaces header field.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_RIN_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_RIN_02(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_RIN_02  

		   /*
			* @desc Verify that the SCC AS processes an INVITE if it is unable to associate the SIP INVITE request with a confirmed dialog or on a previously established dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_RIN_03(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_RIN_03(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_RIN_03  

		   /*
			* @desc Verify that the SCC AS processes an INVITE if number of media lines in the Target Access Leg is less than the number of media lines in the Source Access Leg.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_RIN_04(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_RIN_04(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_RIN_04 

		   /*
			* @desc Verify that the SCC AS successfully processes an BYE on a previously established dialog, if does not receive within this time interval an initial SIP INVITE request.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_BYE_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_BYE_01(p_cSeq_s));

				// synchronize both PTCs on 4 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_BYE_01 

		   /*
			* @desc Verify that the SCC AS successfully processes an CANCEL on a early dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_BYE_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_BYE_02(p_cSeq_s));

				// synchronize both PTCs on 4 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_BYE_02 

		   /*
			* @desc Verify that the SCC AS successfully processes an CANCEL on a early dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_CAN_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_CAN_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_CAN_01

		   /*
			* @desc Verify that the SCC AS successfully processes an SIP 503 (Service Unavailable) response on a early dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PPT_RES_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PPT_RES_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PPT_RES_01

	} // End of group Group_10_3
     
    group Group_11_3 {
    	
		   /*
			* @desc Verify that the SCC AS successfully processes an INVITE that includes an active speech media component using CS bearer.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_01    	

		   /*
			* @desc Verify that the SCC AS successfully processes an INVITE due to two STIs on the Target Access Leg.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_02(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_02  

		   /*
			* @desc Verify that the SCC AS rejects an INVITE due missing ability to associate it to an ongoing or different SIP dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_03(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_03(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_03 
    	
    } // End of group Group_11_3

    group Group_12_3 {
    	
		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for terminating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_06(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_06(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_06     	

		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for originating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_02(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_02   

		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for originating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_03(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_03(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_03 

		   /*
			* @desc Verify that the SCC AS handles correctly the procedures for handling of SIP OPTIONS request.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_MED_OPT_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_MED_OPT_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_MED_OPT_01 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of session with active speech media component.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_07(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_07(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_07 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of session with inactive speech media component.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_08(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_08(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_08 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of originating session in alerting phase.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_09(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_09(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_09 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of terminating session in alerting phase.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_10(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_10(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_10 

		   /*
			* @desc Verify that the SCC AS handles correctly additional session transfer initiation.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_11(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_11(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_11 

		   /*
			* @desc Verify that the SCC AS handles correctly transfer of session with inactive speech media component.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_12(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_12(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_12 

		   /*
			* @desc Verify that the SCC AS handles correctly transfer of originating session in alerting phase.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_13(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_13(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_13

		   /*
			* @desc Verify that the SCC AS handles correctly transfer of terminating session in alerting phase.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_14(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_14(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_14

		   /*
			* @desc Verify that the SCC AS correctly behave procedures when the access transfer is completed.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_TER_BYE_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_TER_BYE_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_TER_BYE_01
    	
    } // End of group Group_12_3
     
} // End of module AtsSccas_Testcases
