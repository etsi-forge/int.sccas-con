/*
 *    @author     TTF T016
 *    @version    $Id$
 *    @desc       This module provides the Test Cases for SCCAS.
 */

module AtsSccas_Testcases
{
    //LibCommon
    import from LibCommon_Sync all ;
    import from LibCommon_VerdictControl all;
    //LibSip
    import from LibSip_Interface all;
    import from LibSip_SIPTypesAndValues all;
    //LibIms
    import from LibIms_SIPTypesAndValues all;
    import from LibIms_Interface all;
    //AtsIms
    import from AtsSccas_TestConfiguration all;
    import from AtsSccas_TestSystem all;
    import from AtsSccas_TCFunctions all;
    import from AtsSccas_PICS all;

    group Group_6_3 {
 
        group TP_6_3_1_General {

            /*
            * @desc Verify that the SCCAS successfully obtain/processes 3pty registration information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_01(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_01(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_01

            /*
            * @desc Verify that the SCCAS successfully obtain/processes de-registration information (Expires=0)
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_02(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_02(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_02

          } // End of group TP_6_3_1_General

        group TP_6_3_2_Triggers_To_ATCF {

            /*
            * @desc Verify that the SCCAS successfully obtain/processes SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_03(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_03(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_RSC_REG_03

          } // End of group TP_6_3_2_Triggers_To_ATCF

        group TP_6_3_3_SRVCC_Information_To_ATCF {

            /*
            * @desc Verify that the SCCAS successfully sends MESSAGE providing PS to CS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_04(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_atcf;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_atcf);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_04_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_atcf.start(f_TC_ISC_SCCAS_RSC_REG_04_atcf(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_atcf);

            } // End of TC_ISC_SCCAS_RSC_REG_04

          } // End of group TP_6_3_3_SRVCC_Information_To_ATCF

        group TP_6_3_4_Trigger_SRVCC_To_MSC {

            /*
            * @desc Verify that the SCCAS successfully get CS to PS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_05(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_msc;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_msc);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_05_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_msc.start(f_TC_ISC_SCCAS_RSC_REG_05_msc(p_cSeq_s)); // TODO Not considered in TP?

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_msc);

            } // End of TC_ISC_SCCAS_RSC_REG_05

          } // End of group TP_6_3_4_Trigger_SRVCC_To_MSC

        group TP_6_3_5_Providing_SRVCC_To_MSC {

            /*
            * @desc Verify that the SCCAS successfully provide CS to PS SRVCC information
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_RSC_REG_06(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;
                var ImsComponent v_imsComponent_msc;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                f_cf_1Isc1AtcfUp(v_imsComponent_ueims, v_imsComponent_msc);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_RSC_REG_06_ueims(p_cSeq_s));
                f_IncCSeq(p_cSeq_s); v_imsComponent_msc.start(f_TC_ISC_SCCAS_RSC_REG_06_msc(p_cSeq_s)); // TODO Not considered in TP?

                // synchronize both PTCs on 3 sychronization points
                f_serverSync2Clients({c_prDone, c_tbDone, c_poDone});

                f_cf_1Isc1AtcfDown(v_imsComponent_ueims, v_imsComponent_msc);

            } // End of TC_ISC_SCCAS_RSC_REG_06

          } // End of group TP_6_3_5_Providing_SRVCC_To_MSC

     } // End of group Group_6_3
     
     group Group_6A_4 {

        group TP_6A_4_2_SIP_INVITE_request {

           /*
            * @desc Verify that the SCCAS send INVITE for anchored user populated with FeatureCaps header
            * @param p_cSeq_s Transaction Id
            */
            testcase TC_ISC_SCCAS_GEN_INV_01(inout CSeq p_cSeq_s) 
            runs on ServerSyncComp
            system TestAdapter {
                //Variables
                var ImsComponent v_imsComponent_ueims;

                // Test control
                if (not PICS_SCCAS_GM) {
                    log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
                    stop;
                }

                // Test component configuration
                f_cf_1IscUp(v_imsComponent_ueims);

                //Start
                f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_GEN_INV_01(p_cSeq_s));

                // synchronize both PTCs on 3 sychronization points
                f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

                f_cf_1IscDown(v_imsComponent_ueims);

            } // End of TC_ISC_SCCAS_GEN_INV_01

        } // End of group TP_6A_4_2_SIP_INVITE_request

    } // End of group Group_6A_4
     
    group Group_7_3 {
    } // End of group Group_7_3
     
    group Group_8_3 {
    } // End of group Group_8_3
     
    group Group_9_3 {
    } // End of group Group_9_3
     
    group Group_10_3 {
    } // End of group Group_10_3
     
    group Group_11_3 {
    	
		   /*
			* @desc Verify that the SCC AS successfully processes an INVITE that includes an active speech media component using CS bearer.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_01    	

		   /*
			* @desc Verify that the SCC AS successfully processes an INVITE due to two STIs on the Target Access Leg.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_02  

		   /*
			* @desc Verify that the SCC AS rejects an INVITE due missing ability to associate it to an ongoing or different SIP dialog.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CON_RIN_03(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CON_RIN_03(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CON_RIN_03 
    	
    } // End of group Group_11_3

    group Group_12_3 {
    	
		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for terminating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_06(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_06(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_06     	

		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for originating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_02(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_02(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_02   

		   /*
			* @desc Verify that SCC AS correctly recognizes and initiated for PS to CS access transfer for originating call in pre-alerting phase using PS to CS SRVCC procedure.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_PCT_INV_03(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_PCT_INV_03(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_PCT_INV_03 

		   /*
			* @desc Verify that the SCC AS handles correctly the procedures for handling of SIP OPTIONS request.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_MED_OPT_01(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_MED_OPT_01(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_MED_OPT_01 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of session with active speech media component.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_07(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_07(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_07 

		   /*
			* @desc Verify that the SCC AS handles correctly the transfer of session with inactive speech media component.
			* @param p_cSeq_s Transaction Id
			*/
			testcase TC_ISC_SCCAS_CPT_INV_08(inout CSeq p_cSeq_s) 
			runs on ServerSyncComp
			system TestAdapter {
				//Variables
				var ImsComponent v_imsComponent_ueims;

				// Test control
				if (not PICS_SCCAS_GM) {
					log("*** " & __SCOPE__ & ": ERROR: 'PICS_SCCAS_GM' shall be set to true for executing the TC. ***"); 
					stop;
				}

				// Test component configuration
				f_cf_1IscUp(v_imsComponent_ueims);

				//Start
				f_IncCSeq(p_cSeq_s); v_imsComponent_ueims.start(f_TC_ISC_SCCAS_CPT_INV_08(p_cSeq_s));

				// synchronize both PTCs on 3 sychronization points
				f_serverSync1Client({c_prDone, c_tbDone, c_poDone});

				f_cf_1IscDown(v_imsComponent_ueims);

			} // End of TC_ISC_SCCAS_CPT_INV_08 
    	
    } // End of group Group_12_3
     
} // End of module AtsSccas_Testcases
