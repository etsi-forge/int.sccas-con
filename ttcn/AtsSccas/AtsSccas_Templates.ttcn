/*
 *    @author     TTF T016
 *    @version    $Id: AtsIms_Templates.ttcn
 *    @desc        This module provides the templates used by the SCCAS
 */

module AtsSccas_Templates
{    
    
    //LibSip
    import from LibSip_SIPTypesAndValues all;
    import from LibSip_MessageBodyTypes all;
    import from LibSip_Templates all;
    import from LibSip_Common all;

    //LibIms
    import from LibIms_SIPTypesAndValues all;
    import from LibIms_Templates all;
    
    import from LibSip_SDPTypes all;
  
    group HeaderTemplates {                
        
        template (value) Supported m_sccas_supported(
                                                     in OptionTag_List p_optionsTags
                                                     ) modifies m_supported := {
            optionsTags := p_optionsTags
        } // End of template m_sccas_supported

        template (present) Supported mw_sccas_supported(
                                                        template (present) OptionTag_List p_optionsTags := ?
                                                        ) := {
            fieldName := SUPPORTED_E,
            optionsTags := p_optionsTags
        } // End of template mw_sccas_supported

        template (value) FeatureCaps m_sccas_featureCaps(
                                                         in template (value) FcValue_List p_fcValues
                                                         ) := {
            fieldName := FEATURE_CAPS_E,
            fcValues := p_fcValues
        } // End of template m_sccas_featureCaps

        template (present) FeatureCaps mw_sccas_featureCaps(
                                                            template (present) FcValue_List p_fcValues := ?
                                                            ) := {
            fieldName := FEATURE_CAPS_E,
            fcValues := p_fcValues
        } // End of template mw_sccas_featureCaps

        template (omit) FcValue m_fcValue(
                                          in charstring p_wildcard,
                                          in template (omit) SemicolonParam_List p_fcParams := omit
                                          ) := {
            wildcard := p_wildcard,
            fcParams := p_fcParams
        } // End of template m_fcValue

        template (present) FcValue mw_fcValue(
                                    template (present) charstring p_wildcard := ?,
                                    template SemicolonParam_List p_fcParams := *
                                    ) := {
            wildcard := p_wildcard,
            fcParams := p_fcParams
        } // End of template mw_fcValue

        template(value) Contact m_sccas_contact(
                                                in template (value) SipUrl p_sipUrl,
                                                in template (value) SemicolonParam_List p_contactParams
                                                ) modifies m_Contact := {
            contactBody := {
                contactAddresses := {
                    {
                        contactParams := p_contactParams
                    }
                }
            }
        } // End of template m_sccas_contact

        template (present) LibSip_SIPTypesAndValues.Contact mw_sccas_contact(
                                                                             template (present) ContactBody p_contact_body := ?,
                                                                             template SemicolonParam_List p_contactParams := *
                                                                             ) := {
            fieldName   := CONTACT_E,
            contactBody := p_contact_body
        } // End of template mw_sccas_contact

        template (present) PAccessNetworkInfo mw_pAccessNetworkInfo := { // TODO To be refined
            fieldName := P_ACCESS_NETWORK_INFO_E,
            accessType := ?,
            genericParams := ?
        } // End of template mw_pAccessNetworkInfo

        group HeaderTemplatesAxel {
        }
        
        group HeaderTemplatesSteffen {
        }
        
        group HeaderTemplatesBostjan {
        }
        
        group HeaderTemplatesIztok {
        }
        
        group HeaderTemplatesYann {
        }

    } // End of group HeaderTemplates
    
    group MessageTemplates {

        group modified_templates {

            group request_sent {
      
                template (omit) REGISTER_Request m_sccas_register(
                                                                  template(value) SipUrl p_requestUri,
                                                                  template(omit) CallId p_callId := omit,
                                                                  template(value) CSeq p_cSeq,
                                                                  template(value) From p_from,
                                                                  template(value) To p_to,
                                                                  template(value) Via p_via,
                                                                  template(omit) LibSip_SIPTypesAndValues.Contact p_contact := omit,
                                                                  template(omit) Authorization p_authorization := omit,
                                                                  template(value) charstring p_host,
                                                                  template(value) integer p_port,
                                                                  template(value) DeltaSec p_deltaSec,
                                                                  template(omit) FeatureCaps p_featureCaps := omit,
                                                                  template(omit) ContentType p_contentType := omit,
                                                                  template(omit) MessageBody p_mb := omit

                ) modifies m_REGISTER_Request_expires_IMS := {
                    msgHeader := {
                        contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                        contentType   := p_contentType,
                        expires       := m_expires(str2int(valueof(p_deltaSec))),
                        featureCaps   := p_featureCaps
                    },
                    messageBody := p_mb
                }
                group request_sent_Axel {

				template (omit) INVITE_Request m_sccas_invite_replaces(
															  in template(value) SipUrl p_requestUri,
															  in template(value) CallId p_callId,
															  in template(value) CSeq p_cSeq,
															  in template(value) From p_from,
															  in template(value) To p_to,
															  in template(value) LibSip_SIPTypesAndValues.Via p_via,
															  in template(value) LibSip_SIPTypesAndValues.Contact p_contact,
															  in template(omit) Require p_require := omit,
															  in template(omit) Route p_route := omit,
															  in template(omit) Supported p_supported := omit,
															  in template(value) MessageBody p_mb,
															  in template(omit) Replaces p_replaces := omit
				) modifies m_INVITE_Request_UE := {
					msgHeader := {
						contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
						contentType := m_contentType(c_sdpApplication)
					},
					messageBody := p_mb
				}
				
                }
            
                group request_sent_Steffen {
                	
					
					template LibSip_SIPTypesAndValues.Contact m_contact_g3gppDrvccOrigPreAlertingFeature := {
						fieldName := CONTACT_E,
						contactBody := {
							wildcard :=
								"g3gppDrvccOrigPreAlertingFeature"
						}
					}
                	
					template LibSip_SIPTypesAndValues.Contact m_contact_g3gppSrvccAlertingFeature := {
						fieldName := CONTACT_E,
						contactBody := {
							wildcard :=
								"g3gppSrvccAlertingFeatureCapabilityIndicator"
						}
					}
					
					template LibSip_SIPTypesAndValues.Contact m_contact_g3gppDrvccAlertingFeature := {
						fieldName := CONTACT_E,
						contactBody := {
							wildcard :=
								"g3gppDrvccAlertingFeature"
						}
					}
					
                    
                    template LibSip_MessageBodyTypes.MessageBody m_messageBody_SDP_mediaOnly := {
						sdpMessageBody := {
							protocol_version := 1, // TODO
							origin := {
								user_name := "username", // TODO 
								session_id := "sessionID", // TODO
								session_version := "sessionVersion", // TODO
								net_type := "netType", // TODO
								addr_type := "addrType", // TODO
								addr := "addr" // TODO
							},
							session_name := "sessionName", // TODO
							information := omit,
							uri := omit,
							emails := omit,
							phone_numbers := omit,
							connection := omit,
							bandwidth := omit,
							times := {
								{
									time_field := {
										start_time := "start", // TODO
										stop_time //* field is numeric strings  // TODO
												  //* that may not fit into
												  //* 32-bit signed int
											:= "stop"
									},
									time_repeat := omit
								}
							},
							timezone_adjustments := omit,
							key := omit,
							attributes := omit,
							media_list := {
								{
									media_field := {
										media := "media",
										ports := {
											port_number := 1,
											num_of_ports := omit
										},
										transport := "transport",
										fmts := {"fmts"}
									},
									information := omit,
									connections := omit,
									bandwidth := omit,
									key := omit,
									attributes := omit
								}
							}
						}
					}
                    
                    
                    
                    template  Supported m_supported_replaces := 
                    {
                         fieldName := REPLACES_E,
                        optionsTags := omit 
                    }
                    
//                 template(value) Response m_Response_Dummy := {
//                    statusLine := c_statusLine100,
//                    msgHeader := m_msgHeader_dummy,
//                    messageBody := omit,
//                    payload := omit
//                }
                    
        
                    template (omit) INVITE_Request m_sccas_invite_contact(
                        template(value) SipUrl p_requestUri,
                        template(value) CallId p_callId,
                        template(value) CSeq p_cSeq,
                        template(value) From p_from,
                        template(value) To p_to,
                        template(value) Via p_via,
                        template(value) Contact p_contact,
                        template(omit) Require p_require := omit,
                        template(omit) Route p_route := omit,
                        template(omit) Supported p_supported := omit,
                        template(value) MessageBody p_mb
                    ) modifies m_INVITE_Request_UE := {
                        
                        msgHeader := {
                            callId := p_callId,
                            contact := p_contact,
                            cSeq := p_cSeq,
                            fromField := p_from,
                            toField := p_to,
                            via := p_via
                            },
                        messageBody := p_mb,
                        payload := omit
                    }
                    
                    
                }
                
                group request_sent_Bostjan {
                }
                
                group request_sent_Iztok {
                      //SIP name application
                      const charstring c_sipMessage := "message/sip";
                      const charstring c_mimeMultipart := "multipart/mixed";
    
                      const charstring c_boundary := "--m5hnsik49jfkg";    
    
                      template(value) GenericParam m_contentTypeBoundary(charstring p_boundary) := {
                                  id := "boundary",
                                  paramValue := { tokenOrHost := p_boundary }
                              }
                              
                      //module LibSip_MessageBodyTypes
                      // group MIMETypes {
                      // type union MIME_Encapsulated_Parts {
                      //       SDP_Message sdpMessageBody,
                      //       XmlBody xmlBody, // if there is XML body
                      //       MsdBody msdBody, // RFC 8147: Minimum Set of Data octets
                      //       RequestUnion sipReq,   //TODO in libsip sip message
                      //       Response sipRsp   //TODO in libsip sip response
                      // }
                      template(value) MessageBody m_MBody_MIME_SipReqResp(
                                  charstring p_boundary,
                                  template(value) RequestUnion p_request,
                                  template(value) Response p_response
                              ) := {
                                  mimeMessageBody := {
                                      boundary := /*"--" & */p_boundary,
                                      mimeEncapsulatedList := {
                                          {
                                              content_type := c_sipMessage,
                                              content_disposition := omit,
                                              content_id := omit,
                                            mime_encapsulated_part := {msdBody:= '00'O} //TODO remove
                                              //TODO uncoment mime_encapsulated_part := {sipReq := p_request}
                                          },
                                          {
                                              content_type := c_sipMessage,
                                              content_disposition := omit,
                                              content_id := omit,
                                            mime_encapsulated_part := {msdBody:= '00'O} //TODO remove
                                              //TODO uncoment mime_encapsulated_part := {sipRes := p_response}
                                          }
                                      }
                                  }
                              }
            
                      template ServiceRoute m_serviceroute_ims(SipUrl p_serviceroute_sip_url ) := {
     
                                 fieldName := SERVICE_ROUTE_E,
                         routeBody := {
                             {
                                 nameAddr := {
                                     displayName := omit,
                                     addrSpec := p_serviceroute_sip_url
                                 },
                                 rrParam := omit
                             }
                         }               
                      }
                      template (omit) REGISTER_Request m_register_ue_srvcc(
                                                                          template(value) SipUrl p_requestUri,
                                                                          template(omit) CallId p_callId := omit,
                                                                          template(value) CSeq p_cSeq,
                                                                          template(value) From p_from,
                                                                          template(value) To p_to,
                                                                          template(value) Via p_via,
                                                                          template(omit) LibSip_SIPTypesAndValues.Contact p_contact := omit,
                                                                          template(omit) Authorization p_authorization := omit,
                                                                          template(value) charstring p_host,
                                                                          template(value) integer p_port,
                                                                          template(value) DeltaSec p_deltaSec,
                                                                          template(omit) FeatureCaps p_featureCaps := omit,
                                                                          template(omit) ContentType p_contentType := omit,
                                                                          template(omit) MessageBody p_mb := omit

                        ) modifies m_REGISTER_Request_expires_IMS := {
                            msgHeader := {
                                contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                                contentType   := p_contentType,
                                expires       := m_expires(str2int(valueof(p_deltaSec))),
                                featureCaps   := p_featureCaps
                            },
                            messageBody := p_mb
                        }
                
        
                
                        template(value) REGISTER_Request m_REGISTER_Request_AS(
                                            template(value) SipUrl p_requestUri,
                                            template(omit) CallId p_callId := omit,
                                            template(value) CSeq p_cSeq,
                                            template(value) From p_from,
                                            template(value) To p_to,
                                            template(value) Via p_via,
                                            template(omit) Contact p_contact := omit,
                                            template(omit) Authorization p_authorization := omit,
                                            template(value) DeltaSec p_deltaSec,
                                            template(omit) ContentType p_contentType := omit,
                                            template(omit) MessageBody p_mb := omit
                        ) modifies m_REGISTER_Request_Base := {
                            requestLine := {
                                method := REGISTER_E,
                                requestUri := p_requestUri
                            },
                            msgHeader := {
                                authorization := p_authorization,
                                callId := p_callId,
                                contact := p_contact,
                                cSeq := p_cSeq,
                                fromField := p_from,
                                pChargingVector := m_pChargingVector_icid_TS,
                                pVisitedNetworkID := m_pVisitedNetworkID_TS,
                                toField := p_to,
                                via := p_via,
                                contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                                contentType   := p_contentType,
                                expires       := m_expires(str2int(valueof(p_deltaSec)))
                            },
                            messageBody := p_mb
                        }
                        group response_sent{
							template(value) Response m_Response_18XonINVITE_AS_Featurecaps(
								template(value) StatusLine_18x p_statusLine,
								template(value) CallId p_callId,
								template(value) CSeq p_cSeq,
								template(value) From p_from,
								template(value) To p_to,
								template(value) Via p_via,
								template(omit) Contact p_contact := omit,
								template(omit) FeatureCaps p_featureCaps := omit
                                                                          
							) modifies m_Response_18x_Base := {
								msgHeader := {
									contact := p_contact, // mandatory field due to 24 229 rel 7.9
									featureCaps   := p_featureCaps
								}
							}
                        
                        } //End of group response
                }
                
                group request_sent_Yann {
                }
               
                template (omit) INVITE_Request m_sccas_invite(
                                                              in template(value) SipUrl p_requestUri,
                                                              in template(value) CallId p_callId,
                                                              in template(value) CSeq p_cSeq,
                                                              in template(value) From p_from,
                                                              in template(value) To p_to,
                                                              in template(value) LibSip_SIPTypesAndValues.Via p_via,
                                                              in template(value) LibSip_SIPTypesAndValues.Contact p_contact,
                                                              in template(omit) Require p_require := omit,
                                                              in template(omit) Route p_route := omit,
                                                              in template(omit) Supported p_supported := omit,
                                                              in template(value) MessageBody p_mb
                ) modifies m_INVITE_Request_UE := {
                    msgHeader := {
                        contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                        contentType := m_contentType(c_sdpApplication)
                    },
                    messageBody := p_mb
                }

            } // End of group request_sent    
            
            group request_receive { 

                template (present) REGISTER_Request mw_sccas_register(
                                                                      template (present) Path p_Path := ?,
                                                                      template (present) PChargingVector p_pChargingVector := ?,
                                                                      template (present) PVisitedNetworkID p_pVisitedNetworkID := ?,
                                                                      template (present) LibSip_SIPTypesAndValues.Contact p_contact := mw_sccas_contact,
                                                                      template (present) Authorization p_authorization := mw_Authorization_digest,
                                                                      template (present) Expires p_expires := ?,
                                                                      template (present) Supported p_supported := ?,
                                                                      template (present) Require p_require := ?,
                                                                      template (present) PAccessNetworkInfo p_pPAccessNetworkInfo := ?,
                                                                      template ContentType p_contentType := *,
                                                                      template MessageBody p_mb := *
                                                                      ) modifies mw_REGISTER_Request_IMS := {
                    msgHeader := {
                        contact            := p_contact,
                        contentType        := p_contentType,
                        authorization      := p_authorization,
                        expires            := p_expires,
                        supported          := p_supported,
                        pAccessNetworkInfo := p_pPAccessNetworkInfo
                    },
                    messageBody := p_mb 
                } // End of template mw_sccas_register

                template (present) MESSAGE_Request mw_sccas_MESSAGE_Request(
                                                                            template (present) SipUrl p_requestUri := ?,
                                                                            template (present) CallId p_callId := ?,
                                                                            template (present) PChargingVector p_pChargingVector := ?,
                                                                            template (present) PAssertedID p_pAssertedID := ?,
                                                                            template ContentType p_contentType := *,
                                                                            template MessageBody p_mb := *
                                                                            ) modifies mw_MESSAGE_Request_Base := {
                    requestLine := {
                        requestUri := p_requestUri
                    },
                    msgHeader := {
                        callId          := p_callId,
                        contentType     := p_contentType,
                        pChargingVector := p_pChargingVector,
                        pAssertedID     := p_pAssertedID                        
                    },
                    messageBody := p_mb 
                } // End of template mw_sccas_MESSAGE_Request

                template (present) Response mw_sccas_Response_2xxonREGISTER(
                                                                            template (present) CallId p_callId := ?,
                                                                            template (present) CSeq p_cSeq := ?,
                                                                            template (present) From p_from := ?,
                                                                            template (present) To p_to := ?,
                                                                            template (present) Via p_via := ?,
                                                                            template (present) Contact p_contact := ?,
                                                                            template (present) PChargingVector p_pChargingVector := ?,
                                                                            template (present) PAssertedID p_pAssertedID := ?,
                                                                            template AcceptContact p_acceptContact := *
                                                                            ) modifies mw_Response_2xx_Base := {
                    msgHeader := {
                        pChargingVector := p_pChargingVector,
                        contact         := p_contact,
                        acceptContact   := p_acceptContact
                    }
                } // End of template mw_sccas_Response_2xxonREGISTER
                

                group request_receive_Axel {
                }
            
                group request_receive_Steffen {
                
			     template LibSip_SIPTypesAndValues.ContentType mw_contentType_appclication_sdp := {
					 fieldName := CONTENT_TYPE_E, 
					 mTypeSubtype := "appclication/sdp", 
					 mParams := *
				 }

                
                template LibSip_SDPTypes.SDP_Message mw_sdpmessageBody := {
					protocol_version := ?,
					origin := ?,
					session_name := ?,
					information := *,
					uri := *,
					emails := *,
					phone_numbers := *,
					connection := *,
					bandwidth := *,
					times := ?,
					timezone_adjustments := ?,
					key := ?,
					attributes := ?,
					media_list := {
						{
							media_field := ?,
							information := *,
							connections := *,
							bandwidth := *,
							key := *,
							attributes := *
						}
					}
				}

                
                	
				template(present) UPDATE_Request mw_UPDATE_Request_ContactChange(
					template CallId p_callId,
					template(present) Contact p_contact := ?,
					template(present) ContentType p_contenType := ?,
					template(present) SDP_Message p_sdpMessageBody := ?
				) modifies mw_UPDATE_Request_Base := {
					msgHeader := {
						callId := p_callId,
						contact := p_contact,
						contentType := p_contenType
					},
					messageBody := {
						sdpMessageBody := p_sdpMessageBody
					}
				}
                	
                    
				template LibSip_SIPTypesAndValues.Contact mw_contact_g3gppMidcallFeature := {
						fieldName := ?, contactBody := ? // TODO: correct use of g3gppMidcallFeatureCapabilityIndicator
					}
                    
					template LibSip_SIPTypesAndValues.Contact mw_contact_sourceLegAtCreation := {
						fieldName := ?, contactBody := ? // TODO: "set to the Contact header field provided on the source leg at the creation of the dialog",
					}
					
					template LibSip_SIPTypesAndValues.Contact mw_contact_g3gppDrvccAlertingFeature := {
						fieldName := ?, contactBody := ? // TODO: correct use of g3gppDrvccAlertingFeature
					}
					
					
                    
					template (present) Response mw_sccas_Response_2xxmediaOnly(
						//template (present) StatusLine.statusCode p_statusCode := 200,
						template (present) CallId p_callId := ?,
						template (present) CSeq p_cSeq := ?,
						template (present) From p_from := ?,
						template (present) To p_to := ?,
						template (present) Via p_via := ?,
						template (present) Contact p_contact := ?,
						template (present) PChargingVector p_pChargingVector := ?,
						template (present) PAssertedID p_pAssertedID := ?,
						template AcceptContact p_acceptContact := *
					) modifies mw_Response_2xx_Base := {
				//		statusLine := mw_statusLine(p_statusCode, ?),
						messageBody :=
						{
							sdpMessageBody :=
							{
								protocol_version := ?,
								origin := ?,
								session_name := ?,
								information := *,
								uri := *,
								emails := *,
								phone_numbers := *,
								connection := *,
								bandwidth := *,
								times := ?,
								timezone_adjustments := *,
								key := *,
								attributes := *,
								media_list := ? // TODO: media only && Version 0
							}
						}
					}
                    
                    template (present) Response mw_sccas_Response_200mediaOnly(
                        template (present) StatusLine.statusCode p_statusCode := 200,
                        template (present) CallId p_callId := ?,
                        template (present) CSeq p_cSeq := ?,
                        template (present) From p_from := ?,
                        template (present) To p_to := ?,
                        template (present) Via p_via := ?,
                        template (present) Contact p_contact := ?,
                        template (present) PChargingVector p_pChargingVector := ?,
                        template (present) PAssertedID p_pAssertedID := ?,
                        template AcceptContact p_acceptContact := *
                    ) modifies mw_Response_StatusCode_Base := {

                        statusLine := mw_statusLine(p_statusCode, ?),
                        messageBody :=
                        {
                            sdpMessageBody :=
                            {
                                protocol_version := ?,
                                origin := ?,
                                session_name := ?,
                                information := *,
                                uri := *,
                                emails := *,
                                phone_numbers := *,
                                connection := *,
                                bandwidth := *,
                                times := ?,
                                timezone_adjustments := *,
                                key := *,
                                attributes := *,
                                media_list := ? // TODO: media only && Version 0
                            }
                        }
                    
                    }
                }
                
                group request_receive_Bostjan {
                }
                
                group request_receive_Iztok {
                    template (present) Response mw_Response_2xxonREGISTER_AS(
                                                                            template (present) CallId p_callId := ?,
                                                                            template (present) CSeq p_cSeq := ?,
                                                                            template (present) From p_from := ?,
                                                                            template (present) To p_to := ?,
                                                                            template (present) Via p_via := ?,
                                                                            template (present) Contact p_contact := ?,
                                                                            template (present) PChargingVector p_pChargingVector := ?,
                                                                            template (present) PAssertedID p_pAssertedID := ?,
                                                                            template AcceptContact p_acceptContact := *
                                                                            ) modifies mw_Response_2xx_Base := {
                    msgHeader := {
                        pChargingVector := p_pChargingVector,
                        contact         := p_contact,
                        acceptContact   := p_acceptContact
                    }}
                
                
				    template (present) INVITE_Request mw_INVITE_Request_AS(
																						   template (present) SipUrl p_requestUri := ?,
																						   template (present) CallId p_callId := ?,
																						   template (present) PChargingVector p_pChargingVector := ?,
																						   template (present) PAssertedID p_pAssertedID := ?,
																						   template ContentType p_contentType := *,
																						   template MessageBody p_mb := *
																						   ) modifies mw_INVITE_Request_Base := {
								   requestLine := {
									   requestUri := p_requestUri
								   },
								   msgHeader := {
									   callId          := p_callId,
									   contentType     := p_contentType,
									   pChargingVector := p_pChargingVector,
									   pAssertedID     := p_pAssertedID                        
								   },
								   messageBody := p_mb 
				    } // End of template mw_sccas_MESSAGE_Request
				    
				    group response{
						template(present) Response mw_Response_PCV_FeatureCaps(
											template(present) StatusLine.statusCode p_statusCode := ?,
											template CallId p_callId,
											template CSeq p_cSeq,
											template(present) PChargingVector p_chargingVector := ?,
						                    template(omit) FeatureCaps p_featureCaps := omit
										) modifies mw_Response_StatusCode_Base := {
											msgHeader := {
												pChargingVector := p_chargingVector,
												featureCaps   := p_featureCaps
											}
										}
				    }
                }   
                group request_receive_Yann {
                }

                template (present) Response mw_sccas_Response_2xxonINVITE(
                                                                          template (present) CallId p_callId := ?,
                                                                          template (present) CSeq p_cSeq := ?,
                                                                          template (present) From p_from := ?,
                                                                          template (present) To p_to := ?,
                                                                          template (present) Via p_via := ?,
                                                                          template (present) Contact p_contact := ?,
                                                                          template (present) PChargingVector p_pChargingVector := ?,
                                                                          template (present) PAssertedID p_pAssertedID := ?,
                                                                          template AcceptContact p_acceptContact := *
                                                                          ) modifies mw_Response_2xx_Base := {
                    msgHeader := {
                        pChargingVector := p_pChargingVector,
                        contact         := p_contact,
                        acceptContact   := p_acceptContact
                    }
                } // End of template mw_sccas_Response_2xxonINVITE

            } // End of group request_receive

        } // End of group modified_templates

    } // End ofend group MessageTemplates
    
} // End of module AtsSccas_Templates