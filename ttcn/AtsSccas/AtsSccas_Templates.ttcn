/*
 *    @author     TTF T016
 *    @version    $Id: AtsIms_Templates.ttcn
 *    @desc        This module provides the templates used by the SCCAS
 */

module AtsSccas_Templates
{    
    
    //LibSip
    import from LibSip_SIPTypesAndValues all;
    import from LibSip_MessageBodyTypes all;
    import from LibSip_Templates all;
    import from LibSip_Common all;

    //LibIms
    import from LibIms_SIPTypesAndValues all;
    import from LibIms_Templates all;
  
    group HeaderTemplates {                
        
        template (value) Supported m_sccas_supported(
                                                     in OptionTag_List p_optionsTags
                                                     ) modifies m_supported := {
            optionsTags := p_optionsTags
        } // End of template m_sccas_supported

        template (present) Supported mw_sccas_supported(
                                                        template (present) OptionTag_List p_optionsTags := ?
                                                        ) := {
            fieldName := SUPPORTED_E,
            optionsTags := p_optionsTags
        } // End of template mw_sccas_supported

        template (value) FeatureCaps m_sccas_featureCaps(
                                                         in template (value) FcValue_List p_fcValues
                                                         ) := {
            fieldName := FEATURE_CAPS_E,
            fcValues := p_fcValues
        } // End of template m_sccas_featureCaps

        template (present) FeatureCaps mw_sccas_featureCaps(
                                                            template (present) FcValue_List p_fcValues := ?
                                                            ) := {
            fieldName := FEATURE_CAPS_E,
            fcValues := p_fcValues
        } // End of template mw_sccas_featureCaps

        template (omit) FcValue m_fcValue(
                                          in charstring p_wildcard,
                                          in template (omit) SemicolonParam_List p_fcParams := omit
                                          ) := {
            wildcard := p_wildcard,
            fcParams := p_fcParams
        } // End of template m_fcValue

        template FcValue mw_fcValue(
                                    template (present) charstring p_wildcard := ?,
                                    template SemicolonParam_List p_fcParams := *
                                    ) := {
            wildcard := p_wildcard,
            fcParams := p_fcParams
        } // End of template mw_fcValue

        template(value) Contact m_sccas_contact(
                                                in template (value) SipUrl p_sipUrl,
                                                in template (value) SemicolonParam_List p_contactParams
                                                ) modifies m_Contact := {
            contactBody := {
                contactAddresses := {
                    {
                        contactParams := p_contactParams
                    }
                }
            }
        } // End of template m_sccas_contact

        template (present) LibSip_SIPTypesAndValues.Contact mw_sccas_contact(
                                                                             template (present) ContactBody p_contact_body := ?,
                                                                             template SemicolonParam_List p_contactParams := *
                                                                             ) := {
            fieldName   := CONTACT_E,
            contactBody := p_contact_body
        } // End of template mw_sccas_contact

        template (present) PAccessNetworkInfo mw_pAccessNetworkInfo := { // TODO To be refined
            fieldName := P_ACCESS_NETWORK_INFO_E,
            accessType := ?,
            genericParams := ?
        } // End of template mw_pAccessNetworkInfo

        group HeaderTemplatesAxel {
        }
        
        group HeaderTemplatesSteffen {
        }
        
        group HeaderTemplatesBostjan {
        }
        
        group HeaderTemplatesIztok {
        }
        
        group HeaderTemplatesYann {
        }

    } // End of group HeaderTemplates
    
    group MessageTemplates {

        group modified_templates {

            group request_sent {
      
                template (omit) REGISTER_Request m_sccas_register(
                                                                  template(value) SipUrl p_requestUri,
                                                                  template(omit) CallId p_callId := omit,
                                                                  template(value) CSeq p_cSeq,
                                                                  template(value) From p_from,
                                                                  template(value) To p_to,
                                                                  template(value) Via p_via,
                                                                  template(omit) LibSip_SIPTypesAndValues.Contact p_contact := omit,
                                                                  template(omit) Authorization p_authorization := omit,
                                                                  template(value) charstring p_host,
                                                                  template(value) integer p_port,
                                                                  template(value) DeltaSec p_deltaSec,
                                                                  template(omit) FeatureCaps p_featureCaps := omit,
                                                                  template(omit) ContentType p_contentType := omit,
                                                                  template(omit) MessageBody p_mb := omit

                ) modifies m_REGISTER_Request_expires_IMS := {
                    msgHeader := {
                        contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                        contentType   := p_contentType,
                        expires       := m_expires(str2int(valueof(p_deltaSec))),
                        featureCaps   := p_featureCaps
                    },
                    messageBody := p_mb
                }
                group request_sent_Axel {
                }
            
                group request_sent_Steffen {
                	
					template  Supported m_supported_replaces := 
                	{
 						fieldName := REPLACES_E,
						optionsTags := omit 
					}
					
// 				template(value) Response m_Response_Dummy := {
//					statusLine := c_statusLine100,
//					msgHeader := m_msgHeader_dummy,
//					messageBody := omit,
//					payload := omit
//				}
                	
                	// TODO:change name
                	template (omit) INVITE_Request m_sccas_invite_stl(
						template(value) SipUrl p_requestUri,
						template(value) CallId p_callId,
						template(value) CSeq p_cSeq,
						template(value) From p_from,
						template(value) To p_to,
						template(value) Via p_via,
						template(value) Contact p_contact,
						template(omit) Require p_require := omit,
						template(omit) Route p_route := omit,
						template(omit) Supported p_supported := omit,
						template(value) MessageBody p_mb
                	) modifies m_INVITE_Request_UE := {
						
						msgHeader := {
							callId := p_callId,
							contact := p_contact,
							cSeq := p_cSeq,
							fromField := p_from,
							toField := p_to,
							via := p_via
							},
						messageBody := omit,
						payload := omit
					}
                	
                	
                }
                
                group request_sent_Bostjan {
                }
                
                group request_sent_Iztok {
                }
                
                group request_sent_Yann {
                }
               
                template (omit) INVITE_Request m_sccas_invite(
                                                              in template(value) SipUrl p_requestUri,
                                                              in template(value) CallId p_callId,
                                                              in template(value) CSeq p_cSeq,
                                                              in template(value) From p_from,
                                                              in template(value) To p_to,
                                                              in template(value) LibSip_SIPTypesAndValues.Via p_via,
                                                              in template(value) LibSip_SIPTypesAndValues.Contact p_contact,
                                                              in template(omit) Require p_require := omit,
                                                              in template(omit) Route p_route := omit,
                                                              in template(omit) Supported p_supported := omit,
                                                              in template(value) MessageBody p_mb
                ) modifies m_INVITE_Request_UE := {
                    msgHeader := {
                        contentLength := m_contentLength(f_MessageBodyLength(p_mb)),
                        contentType := m_contentType(c_sdpApplication)
                    },
                    messageBody := p_mb
                }

            } // End of group request_sent    
            
            group request_receive { 

                template (present) REGISTER_Request mw_sccas_register(
                                                                      template (present) Path p_Path := ?,
                                                                      template (present) PChargingVector p_pChargingVector := ?,
                                                                      template (present) PVisitedNetworkID p_pVisitedNetworkID := ?,
                                                                      template (present) LibSip_SIPTypesAndValues.Contact p_contact := mw_sccas_contact,
                                                                      template (present) Authorization p_authorization := mw_Authorization_digest,
                                                                      template (present) Expires p_expires := ?,
                                                                      template (present) Supported p_supported := ?,
                                                                      template (present) Require p_require := ?,
                                                                      template (present) PAccessNetworkInfo p_pPAccessNetworkInfo := ?,
                                                                      template ContentType p_contentType := *,
                                                                      template MessageBody p_mb := *
                                                                      ) modifies mw_REGISTER_Request_IMS := {
                    msgHeader := {
                        contact            := p_contact,
                        contentType        := p_contentType,
                        authorization      := p_authorization,
                        expires            := p_expires,
                        supported          := p_supported,
                        pAccessNetworkInfo := p_pPAccessNetworkInfo
                    },
                    messageBody := p_mb 
                } // End of template mw_sccas_register

                template (present) MESSAGE_Request mw_sccas_MESSAGE_Request(
                                                                            template (present) SipUrl p_requestUri := ?,
                                                                            template (present) CallId p_callId := ?,
                                                                            template (present) PChargingVector p_pChargingVector := ?,
                                                                            template (present) PAssertedID p_pAssertedID := ?,
                                                                            template ContentType p_contentType := *,
                                                                            template MessageBody p_mb := *
                                                                            ) modifies mw_MESSAGE_Request_Base := {
                    requestLine := {
                        requestUri := p_requestUri
                    },
                    msgHeader := {
                        callId          := p_callId,
                        contentType     := p_contentType,
                        pChargingVector := p_pChargingVector,
                        pAssertedID     := p_pAssertedID                        
                    },
                    messageBody := p_mb 
                } // End of template mw_sccas_MESSAGE_Request

                template (present) Response mw_sccas_Response_2xxonREGISTER(
                                                                            template (present) CallId p_callId := ?,
                                                                            template (present) CSeq p_cSeq := ?,
                                                                            template (present) From p_from := ?,
                                                                            template (present) To p_to := ?,
                                                                            template (present) Via p_via := ?,
                                                                            template (present) Contact p_contact := ?,
                                                                            template (present) PChargingVector p_pChargingVector := ?,
                                                                            template (present) PAssertedID p_pAssertedID := ?,
                                                                            template AcceptContact p_acceptContact := *
                                                                            ) modifies mw_Response_2xx_Base := {
                    msgHeader := {
                        pChargingVector := p_pChargingVector,
                        contact         := p_contact,
                        acceptContact   := p_acceptContact
                    }
                } // End of template mw_sccas_Response_2xxonREGISTER
                

                group request_receive_Axel {
                }
            
                group request_receive_Steffen {
                	
					template (present) Response mw_sccas_Response_200mediaOnly(
						template (present) StatusLine.statusCode p_statusCode := 200,
						template (present) CallId p_callId := ?,
						template (present) CSeq p_cSeq := ?,
						template (present) From p_from := ?,
						template (present) To p_to := ?,
						template (present) Via p_via := ?,
						template (present) Contact p_contact := ?,
						template (present) PChargingVector p_pChargingVector := ?,
						template (present) PAssertedID p_pAssertedID := ?,
						template AcceptContact p_acceptContact := *
					) modifies mw_Response_StatusCode_Base := {

						statusLine := mw_statusLine(p_statusCode, ?),
						messageBody :=
						{
							sdpMessageBody :=
							{
								protocol_version := ?,
								origin := ?,
								session_name := ?,
								information := *,
								uri := *,
								emails := *,
								phone_numbers := *,
								connection := *,
								bandwidth := *,
								times := ?,
								timezone_adjustments := *,
								key := *,
								attributes := *,
								media_list := ? // TODO: media only && Version 0
							}
						}
                	
					}
                }
                
                group request_receive_Bostjan {
                }
                
                group request_receive_Iztok {
                }
                
                group request_receive_Yann {
                }

                template (present) Response mw_sccas_Response_2xxonINVITE(
                                                                          template (present) CallId p_callId := ?,
                                                                          template (present) CSeq p_cSeq := ?,
                                                                          template (present) From p_from := ?,
                                                                          template (present) To p_to := ?,
                                                                          template (present) Via p_via := ?,
                                                                          template (present) Contact p_contact := ?,
                                                                          template (present) PChargingVector p_pChargingVector := ?,
                                                                          template (present) PAssertedID p_pAssertedID := ?,
                                                                          template AcceptContact p_acceptContact := *
                                                                          ) modifies mw_Response_2xx_Base := {
                    msgHeader := {
                        pChargingVector := p_pChargingVector,
                        contact         := p_contact,
                        acceptContact   := p_acceptContact
                    }
                } // End of template mw_sccas_Response_2xxonINVITE

            } // End of group request_receive

        } // End of group modified_templates

    } // End ofend group MessageTemplates
    
} // End of module AtsSccas_Templates